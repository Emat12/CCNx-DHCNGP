1061d1060
< 	struct face *via_face = NULL;
1065,1066d1063
<     
<     struct addrinfo *mcast_source_addrinfo = NULL;
1072,1074d1068
< 	//additions
< 
< 
1077,1126c1071,1074
<             0 == memcmp(face->addr, who, wholen)
< 			)
< 		{	//even their multicast-interface settings are the same.
< 				
< 				//printf("Requested ip %s\n", inet_ntoa(((struct sockaddr_in *)face->addr)->sin_addr));
< 				//if(face_instance->descr.source_address != NULL ) printf("Current face instance source_address found\n");//correct
< 				//if(0 == getaddrinfo(face_instance->descr.source_address, NULL, NULL, &mcast_source_addrinfo) ) printf("Getaddrinfo found %s\n", inet_ntoa(((struct sockaddr_in *)mcast_source_addrinfo->ai_addr)->sin_addr));//correct
< 				//if( face->sendface < h->face_limit && (	 via_face = h->faces_by_faceid[face->sendface] ) != NULL ) printf("A face has been found for %d %s\n", face->sendface, inet_ntoa( ((struct sockaddr_in *)via_face->addr)->sin_addr ));
< 			if(face_instance->descr.source_address == NULL)
< 			{
< 				//No specific Multicast Source interface has been requested
< 				printf("No specific Multicast source interface requested, falling back to default.\n");
< 				hashtb_end(e);
< 				return(face);
< 			}
< 			if(0 != getaddrinfo(face_instance->descr.source_address, NULL, NULL, &mcast_source_addrinfo))
< 			{
< 				printf("Error while unpacking requested source interface, falling back to default.\n");
< 				hashtb_end(e);
< 				return(face);
< 			}
< 			printf("Requested multicast source interface %s with length %d\n", inet_ntoa(((struct sockaddr_in *)mcast_source_addrinfo->ai_addr)->sin_addr), mcast_source_addrinfo->ai_addrlen);
< 			if(face->sendface >= h->face_limit || (	 via_face = h->faces_by_faceid[face->sendface] ) == NULL)
< 			{
< 				printf("Error requesting current via-face for faceid %d and sendface %d, falling back to default.\n", face->faceid, face->sendface);
< 				hashtb_end(e);
< 				return(face);
< 			}
< 			printf("Sendface %d found\n", via_face->faceid );
< 			if( via_face->addr == NULL)
< 			{
< 				printf("Can't read sendface its address, falling back to default\n");
< 				hashtb_end(e);
< 				return(face);
< 			}
< 			printf("Via-face address %s found with length %d.\n",inet_ntoa( ((struct sockaddr_in *)via_face->addr)->sin_addr ), via_face->addrlen);
< 			
< 			//somehow it does not consider the addresses equal by memcmp, maybe because the family is not set correct, therefore I'm checking the addresses
< 			//if(via_face->addrlen == mcast_source _addrinfo->ai_addrlen && 0 == memcmp(via_face->addr, mcast_source_addrinfo->ai_addr, via_face->addrlen))
< 			//if( ((struct sockaddr_in *)via_face->addr)->sin_addr == ((struct sockaddr_in *)mcast_source_addrinfo->ai_addr)->sin_addr )
< 			if( 0 == memcmp( &((struct sockaddr_in *)via_face->addr)->sin_addr, &((struct sockaddr_in *)mcast_source_addrinfo->ai_addr)->sin_addr, sizeof(struct in_addr) ) )
< 			{
< 				//Only now it is equal
< 				printf("The requested multicast face is found to be equal to a previously created face\n");			
< 				hashtb_end(e);
< 				return(face);
< 			}
< 			
< 		}
<         
---
>             0 == memcmp(face->addr, who, wholen)) {
>             hashtb_end(e);
>             return(face);
>         }
1128,1129d1075
< 	printf("No already existing multicast face found, let's create a new one\n");
< 	
